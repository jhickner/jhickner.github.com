<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[forever getline]]></title>
  <link href="http://jhickner.github.com/atom.xml" rel="self"/>
  <link href="http://jhickner.github.com/"/>
  <updated>2012-12-20T10:17:52-08:00</updated>
  <id>http://jhickner.github.com/</id>
  <author>
    <name><![CDATA[Jason Hickner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Easy haskell app deployment with git and Upstart]]></title>
    <link href="http://jhickner.github.com/blog/2012/12/19/easy-haskell-deployment/"/>
    <updated>2012-12-19T20:21:00-08:00</updated>
    <id>http://jhickner.github.com/blog/2012/12/19/easy-haskell-deployment</id>
    <content type="html"><![CDATA[<p>At work I run a bunch of small apps that do little analytics and monitoring
tasks, all spread across servers at Rackspace and Amazon. Haskell is great for
these types of apps since the resident memory usage is often only 2-4mb, which
makes good use of low-ram servers.</p>

<p>This posts describes a simple deployment setup that lets me run unmodified
haskell programs as daemons and have them automatically logged, re-compiled and
re-launched when I do a <code>git push</code>.</p>

<p>Git hooks and <a href="http://upstart.ubuntu.com/">Upstart</a> make this a snap. At the end we&#8217;ll have the standard daemon commands like <code>stop</code>, <code>start</code> and <code>restart</code>, automatic rolling log files and even automatic respawning if our program crashes, all for the price of a tiny config file.</p>

<p>We&#8217;ll use a remote monitoring app called <code>intrepid</code> that I&#8217;ve been working on as an
example, and I&#8217;ll walk through the steps to set up easy deployment.</p>

<h2>Step 1: Set up a remote Git repo</h2>

<p>Assuming you have a local copy of your app&#8217;s source stored in git and complete with a proper .cabal file (easy to create with <code>cabal init</code>), the next step is to set up a receiving repo you can push to. We&#8217;ll make it <code>--bare</code>, because it&#8217;s actually simpler to do a checkout from a bare repo after every push and then run that than it is to try to use the repo&#8217;s working directory.</p>

<p>On your server, create a folder for the repo and initialize it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/projects/Intrepid/repo
</span><span class='line'><span class="nb">cd</span> ~/projects/Intrepid/repo
</span><span class='line'>git --bare init
</span></code></pre></td></tr></table></div></figure>


<p>and create the directory we&#8217;ll check out to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/projects/Intrepid/bin
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll push to this repo in a minute, but first let&#8217;s do some setup. In the bare repo there&#8217;s a <code>hooks</code> directory. You can place scripts here that will be run after or before various actions are performed on the repo (more on hooks <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">here</a>).</p>

<p>We&#8217;ll set up a <code>post-receive</code> hook that will run after the repo recieves a <code>push</code>. Our hook will do a checkout, build our app and restart it. Create a file called <code>post-receive</code> and place it in the repo&#8217;s <code>hooks</code> directory. Don&#8217;t forget to
<code>chod +x</code> so it&#8217;s runnable.</p>

<figure class='code'><figcaption><span>post-receive</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># check out to our working folder by setting GIT_WORK_TREE</span>
</span><span class='line'><span class="nv">GIT_WORK_TREE</span><span class="o">=</span>/home/apps/projects/Intrepid/bin git checkout -f
</span><span class='line'>
</span><span class='line'><span class="c"># cd there, build the app</span>
</span><span class='line'><span class="nb">cd</span> /home/apps/projects/Intrepid/bin
</span><span class='line'>cabal configure
</span><span class='line'>cabal install --only-dependencies
</span><span class='line'>cabal build
</span><span class='line'>
</span><span class='line'><span class="c"># restart with upstart</span>
</span><span class='line'>restart intrepid
</span></code></pre></td></tr></table></div></figure>


<p>All set! This script checks out our code, builds it and restarts after every <code>push</code>. Next we&#8217;ll set up Upstart, which will provide that <code>restart</code> line at the
bottom.</p>

<h2>Step 2: Setting up Upstart</h2>

<p><a href="http://upstart.ubuntu.com/">Upstart</a> is a replacement for the venerable SysV
init, the program we&#8217;ve been using to stop and start unix daemons for <strong>over
150 years</strong> (approximately).</p>

<p><code>init</code> is great, but I like Upstart for small
projects because it&#8217;s so easy to set up, which we&#8217;ll see in a minute. This part of the post is
Upstart-specific, but a similar effect can be squeezed out of any init system,
it just might take a bit more effort. If you&#8217;re running Ubuntu, you have
Upstart.</p>

<p>Here&#8217;s an example Upstart config file for <code>intrepid</code>:</p>

<figure class='code'><figcaption><span>intrepid.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>description <span class="s2">&quot;Intrepid - remote monitoring tool&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start after the filesystem and ethernet are up</span>
</span><span class='line'>start on <span class="o">(</span><span class="nb">local</span>-filesystems and net-device-up <span class="nv">IFACE</span><span class="o">=</span>eth0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>stop on shutdown
</span><span class='line'>
</span><span class='line'><span class="c"># restart automatically if we crash</span>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'><span class="c"># tell upstart how to start our app</span>
</span><span class='line'>script
</span><span class='line'>  <span class="nb">cd</span> /home/apps/projects/Intrepid
</span><span class='line'>  dist/build/intrepid/intrepid
</span><span class='line'>end script
</span></code></pre></td></tr></table></div></figure>


<p>Your conf file should be named <code>&lt;appname&gt;.conf</code> and placed in <code>/etc/init</code>. That&#8217;s it! We get a lot for those few lines, but there&#8217;s a lot more Upstart can do (<a href="http://upstart.ubuntu.com/cookbook/">docs</a>).</p>

<h2>Step 3: Push</h2>

<p>Finally, in our local repo we&#8217;ll add the remote repo as a push target:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add apps ssh://apps@appserver/~/projects/Intrepid/repo
</span></code></pre></td></tr></table></div></figure>


<p>and push to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push apps master
</span></code></pre></td></tr></table></div></figure>


<p>If all goes well, you should see your app compiling successfully, followed by
a message like this from upstart, telling you your app is running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>intrepid start/running, process 5037
</span></code></pre></td></tr></table></div></figure>


<p>And we&#8217;re done! You can now ssh to your server and <code>stop/start/restart intrepid</code>. You
can also type <code>status intrepid</code> to see if it&#8217;s running. You&#8217;ll find rolling log
files of your program&#8217;s stdout/stderr output at
<code>/var/log/upstart/&lt;appname&gt;.log</code>. And every time you <code>git push</code>, your
running app will be automatically updated!</p>
]]></content>
  </entry>
  
</feed>
